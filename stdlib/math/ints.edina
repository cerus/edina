import "stdlib/stack" as stack

#              ######################
#              # Number mins & maxs #
#              ######################

#
# Min and max values for numbers
#
[ eddoc={ stack={ out="Int32 max $int" } desc="Push the maximum value of a 32-bit integer onto the stack" } ]
rt int32_max
  2147483647
end
[ eddoc={ stack={ out="Int32 min $int" } desc="Push the minimum value of a 32-bit integer onto the stack" } ]
rt int32_min
  -2147483648
end
[ eddoc={ stack={ out="Int64 max $int" } desc="Push the maximum value of a 64-bit integer onto the stack" } ]
rt int64_max
  9223372036854775807
end
[ eddoc={ stack={ out="Int64 min $int" } desc="Push the minimum value of a 64-bit integer onto the stack" } ]
rt int64_min
  -9223372036854775808
end

#              ###################
#              # Public routines #
#              ###################

#
# Negate a number
#
[ eddoc={
    stack={ in="Num $int" out="Negated num $int" }
    desc="Negate number"
} ]
rt negate
  -1 *
end

#
# Convert an int to a string
# This routine is a translation of Javas Long#getChars().
#
[ eddoc={
    stack={ in="Num $int" out="Number converted to string $str" }
    desc="Negate number"
} ]
rt int_to_str
  dup .int_str_size swap 0 0  # Init vars / Stack: [Q, R, X, S]

  1 3 rroll
  0 swap gte 1 3 rroll pop
  if .negate 0                # Negate input number and push 0
  else 1 end                  # Else push 1

  # N X Q R S
  1 5 lroll   # X Q R S N
  1 3 lroll   # Q R X S N
  1 5 rroll   # N Q R X S

  # Stack: [N, Q, R, X, S]

  1 4 rroll dup 1 5 lroll  # [X, N, Q, R, X, S]
  .int32_min swap -        # [X-i32, N, Q, R, X, S]

  0 swap gte 1 3 rroll pop
  if pop 0 end
  while
    # [X-i32, N, Q, R, X, S]
    2 5 lroll          # [Q, R, X, X-i32, N, S]
    1 3 rroll          # [X, Q, R, X-i32, N, S]
    over over          # [X, Q, X, Q, R, X-i32, N, S]
    100 swap /         # [X/100, Q, X, Q, R, X-i32, N, S]
    swap pop           # [X/100, X, Q, R, X-i32, N, S]
    1 3 rroll          # [Q, X/100, X, R, X-i32, N, S]
                       # X/100 -> Q
    pop                # Pop old Q / [Q, X, R, X-i32, N, S]
    swap 1 3 lroll     # [Q, R, X, X-i32, N, S]
    dup 100 *          # [Q*100, Q, R, X, X-i32, N, S]
    1 4 rroll          # [X, Q*100, Q, R, X-i32, N, S]
    dup 1 5 lroll      # [X, Q*100, Q, R, X, X-i32, N, S]
    swap -             # [(Q*100)-X, Q, R, X, X-i32, N, S]
                       # (Q*100)-X -> R
    1 3 rroll pop      # [R, Q, X, X-i32, N, S]
    1 3 lroll          # [Q, X, R, X-i32, N, S]
    swap pop dup       # Pop X, dup Q -> X / [Q, X, R, X-i32, N, S]
    1 3 rroll          # [R, Q, X, X-i32, N, S]
    dup ._digit_one    # [0, R, Q, X, X-i32, N, S]
    1 7 lroll          # Forget about the char / [R, Q, X, X-i32, N, S, ...] -> ... = chars
    dup ._digit_ten    # [0, R, Q, X, X-i32, N, S, ...]
    1 7 lroll          # Forget about the char / [R, Q, X, X-i32, N, S, ...]
    # What we need: [X-i32, N, Q, R, X, S]
    swap 2 5 rroll     # [X-i32, N, Q, R, X, S, ...]
    pop 1 4 rroll      # [X, N, Q, R, S, ...]
    dup 1 5 lroll      # [X, N, Q, R, X, S, ...]
    .int32_min swap -  # [X-i32, N, Q, R, X, S, ...]
    0 swap gte 1 3 rroll pop  # [GTE, X-i32, N, Q, R, X, S]
    if pop 0 end
  end

  pop 1 4 rroll        # [X, N, Q, R, S, ...]
  dup -100 swap -      # [X--100, X, N, Q, R, S, ...]
  swap 1 5 lroll       # [X--100, N, Q, R, X, S, ...]
  1 3 lroll            # [N, Q, X--100, R, X, S, ...]
  swap pop 0 swap      # Reset Q to zero
  1 3 rroll            # [X--100, N, Q, R, X, S, ...]
  1 swap -             # [X--100-1, N, Q, R, X, S, ...]

  0 swap gte 1 3 rroll pop
  if pop 0 end
  while
    # [X--100, N, Q, R, X, S, ...]
    1 5 lroll                 # [N, Q, R, X, X--100, S, ...]
    swap 1 4 rroll            # [X, Q, N, R, X--100, S, ...]
    dup 100 swap /            # [X/100, X, Q, N, R, X--100, S, ...]
    1 6 lroll swap 1 6 rroll  # [X/100, Q, X, N, R, X--100, S, ...]
    swap pop                  # X/100 -> Q / [Q, X, N, R, X--100, S, ...]
    dup 100 *                 # [Q*100, Q, X, N, R, X--100, S, ...]
    1 3 rroll dup 1 4 lroll   # [X, Q*100, Q, X, N, R, X--100, S, ...]
    swap -                    # [(Q*100)-X, Q, X, N, R, X--100, S, ...]
    1 5 rroll pop             # (Q*100)-X -> R / [R, Q, X, N, X--100, S, ...]
    1 3 lroll                 # [Q, X, R, N, X--100, S, ...]
    dup 2 3 lroll             # [X, Q, Q, R, N, X--100, S, ...]
    pop                       # Q -> X / [X, Q, R, N, X--100, S, ...]
    1 3 rroll                 # [R, X, Q, N, X--100, S, ...]
    dup ._digit_one           # [0, R, X, Q, N, X--100, S, ...]
    1 7 lroll                 # Forget about the char / [R, X, Q, N, X--100, S, ...]
    dup ._digit_ten           # [0, R, X, Q, N, X--100, S, ...]
    1 7 lroll                 # Forget about the char / [R, X, Q, N, X--100, S, ...]
    # [X--100, N, Q, R, X, S, ...]
    2 4 lroll swap            # [N, Q, R, X, X--100, S, ...]
    1 5 rroll                 # [X--100, N, Q, R, X, S, ...]
    pop 1 4 rroll             # [X, N, Q, R, S, ...]
    dup -100 swap -           # [X--100, X, N, Q, R, S, ...]
    swap 1 5 lroll            # [X--100, N, Q, R, X, S, ...]
    0 swap gte 1 3 rroll pop
    if pop 0 end
  end
  pop  # Discard loop pointer

  # [N, Q, R, X, S, ...]
  swap 1 4 rroll           # [X, Q, N, R, S, ...]
  dup 10 swap /            # [X/10, X, Q, N, R, S, ...]
  1 3 rroll pop            # X/10 -> Q / [Q, X, N, R, S, ...]
  dup 10 *                 # [Q*10, Q, X, N, R, S, ...]
  1 3 rroll dup 1 4 lroll  # [X, Q*10, Q, X, N, R, S, ...]
  swap -                   # [(Q*10)-X, Q, X, N, R, S, ...]
  1 5 rroll pop            # (Q*10)-X -> R / [R, Q, X, N, S, ...]

  # Transform R into char and push to back
  dup 48 +                 # [0, R, Q, X, N, S, ...]
  1 6 lroll                # Forget about char / [R, Q, X, N, S, ...]

  # Check if Q is < 0
  swap 1 +                 # [Q+1, R, X, N, S, ...]
  0 swap lte 1 3 rroll pop
  if
    1 -                    # [Q, R, X, N, S, ...]
    48 +                   # [0, R, X, N, S, ...]
    1 5 lroll              # Forget about char / [R, X, N, S, ...]
  else pop end

  # [R, X, N, S, ...]
  pop pop 1 swap -  # [N-1, S, ...]
  0 swap gte 1 3 rroll pop
  if
    45  # Code for '-'
    1 3 lroll
  end
  pop  # Pop N

  # Reverse the string
  # Because strings are naturally reversed in Edina we need to reverse this currently upside down string
  dup dup 2 + 1 swap lroll  # Put string length in front of string and after string
  1 + :stack.rot            # Add 1 and rotate
end

#
# Calculate the string length of an int
# This routine is a translation of Javas Long#stringSize().
#
[ eddoc={
    stack={ in="Num $int" out="String size $int" }
    desc="Calculate the length that the specified int would occupy as a string"
} ]
rt int_str_size
  0 swap gte 1 3 rroll pop
  if .negate 0  # Negate input number and push 0
  else 1 end      # Push 1

  swap  # [X, 0/1]
  -10   # [-10, X, 0/1]    (P)
  18    # [18, P, X, 0/1] (LOOP)
  while
    dup 19 -       # Stack: [19-LOOP, LOOP, P, X, 0/1]
    1 3 rroll      # Stack: [P, 19-LOOP, LOOP, X, 0/1]
    2 5 rroll      # Stack: [X, 0/1, P, 19-LOOP, LOOP]
    swap           # Stack: [0/1, X, P, 19-LOOP, LOOP]
    1 5 lroll      # Stack: [X, P, 19-LOOP, LOOP, 0/1]
    over over      # Stack: [X, P, X, P, 19-LOOP, LOOP, 0/1]
    - 1 swap -     # Stack: [(X-P)-1, X, P, 19-LOOP, LOOP, 0/1]

    0 swap gte 1 3 rroll pop
    if           # if((X-P)-1 >= 0)
      pop pop pop    # Discard (X-P)-1 and X and P
      1 3 rroll      # Stack: [0/1, 19-LOOP, LOOP]
      +              # Stack: [(0/1)+(19-LOOP), LOOP]
      swap pop 1     # Stack: [1, (0/1)+(19-LOOP)]
      -999 swap      # Stack: [1, -999, (0/1)+(19-LOOP)]
    else
      pop            # Discard (X-P)-1
      swap 10 *      # Stack: [P*10, X, 19-LOOP, LOOP, 0/1]
                     # What we need on the stack: [LOOP, P, X, 0/1]
      1 3 rroll pop  # Stack: [P*10, X, LOOP, 0/1]
      1 3 rroll      # Stack: [LOOP, P*10, X, 0/1]
    end
    1 swap -       # Decr loop
  end

  pop        # Pop the stack counter away
  dup 999 +  # Duplicate top of the stack and add 999
             # If the result is zero, we simply
             # pop unused items and return

  0 swap eq 1 3 rroll pop
  if         # If top of stack is zero...
    pop pop  # ...pop top two items...
  else       # ...else do more arithmetic
    pop
    1 3 rroll  # Stack: [0/1, P*10, X]
    19 +       # Stack: [19+0/1, P*10, X]
    1 3 lroll  # Stack: [P*10, X, 19+0/1]
    pop pop
  end
end

rt parse_int
  # [R, Len, A, B, C]
  # R = Radix

  # Check if length is > 0
  over if
    over 0 0 .int64_max .negate 1 4 rroll  # [Len, Lim, i, Neg, R, Len, A, B, C]

    # I messed up here. Strings are naturally reversed ("abc" -> [3(length), c, b, a]) and this code assumes
    # that the first char of the string immediately follows after the length. I don't want to restructure all
    # of the code, so I decided to just pull the real first char to the front.

    dup 6 + 1 swap rroll                             # [C, Len, Lim, i, Neg, R, Len, A, B]
    1 7 lroll                                        # [Len, Lim, i, Neg, R, Len, C, A, B]
    # The following comments will assume that the string remains in A, C, B order.
    1 7 rroll                                        # [A, Len, Lim, i, Neg, R, Len, B, C]

    # Check first char
    dup .char_zero swap .lt if
      # First char < '0'; Possible leading + or -
      dup .char_minus .eq if
        # First char is -
        # Set Neg to true
        1 5 rroll pop 1                              # [Neg(true), A, Len, Lim, i, R, Len, B, C]
        1 5 lroll                                    # [A, Len, Lim, i, Neg(true), R, Len, B, C]
        # Set Lim to Int64 Min
        1 3 rroll pop .int64_min                # [Lim, A, Len, i, Neg(true), R, Len, B, C]
        1 3 lroll                                    # [A, Len, Lim, i, Neg(true), R, Len, B, C]
      else
        dup .char_plus .neq if
          # First char is not +
          # TODO: Throw error
        end
      end

      # [A, Len, Lim, i, Neg, R, Len, B, C]
      over 1 .eq if
        # String only consists of + or -
        # TODO: Throw error
      end

      # i++
      1 4 rroll 1 +                                  # [i+1, A, Len, Lim, Neg, R, Len, B, C]
      1 4 lroll                                      # [A, Len, Lim, i+1, Neg, R, Len, B, C]
    end

    # [A, Len, Lim, i, Neg, R, Len, B, C]
    over 1 swap - 1 swap 7 +                       # [Len-1+7, 1, A, Len, Lim, i, Neg, R, Len, B, C]
    lroll                                          # [Len, Lim, i, Neg, R, Len, B, C, A]

    # [Len, Lim, i, Neg, R, Len, B, C, A]
    # 1 7 lroll
    1 3 rroll swap                                   # [Len, i, Lim, Neg, R, Len, B, C, A]
    -                                                # [Len-i, Lim, Neg, R, Len, B, C, A]
    1 4 rroll dup 1 5 lroll                          # [R, Len-i, Lim, Neg, R, Len, B, C, A]
    1 3 rroll dup 1 4 lroll                          # [Lim, R, Len-i, Lim, Neg, R, Len, B, C, A]
    / 0   1 3 rroll                                  # [Len-i, Res, Lim/R -> Mm, Lim, Neg, R, Len, B, C, A]

    # [Leni, Res, Mm, Lim, Neg, R, Len, B, C, A]
    #1 +  # [Leni+1, Res, Mm, Lim, Neg, R, Len, B, C, A]
    while
      #1 swap -  # [Leni, Res, Mm, Lim, Neg, R, Len, B, C, A]

      # TODO: Implement the following Java code
      # // Accumulating negatively avoids surprises near MAX_VALUE
      # int digit = Character.digit(s.charAt(i++),radix);
      # if (digit < 0 || result < multmin) {
      #     throw NumberFormatException.forInputString(s, radix);
      # }
      # result *= radix;
      # if (result < limit + digit) {
      #     throw NumberFormatException.forInputString(s, radix);
      # }
      # result -= digit;

      # Would be +8, but we have to dup so we add 8 instead
      dup 8 + 1 over                                   # [Leni+8, 1, Leni+8, Leni, Res, Mm, Lim, Neg, R, Len, B, C, A]
      rroll                                            # [C, Leni+8, Leni, Res, Mm, Lim, Neg, R, Len, B, A]
      dup .latin1_digit                                # [Dig, C, Leni+8, Leni, Res, Mm, Lim, Neg, R, Len, B, A]

      # Dig < 0 || Dig < Mm
      0 over .lt                                       # [Dig<0, Dig, C, Leni+8, Leni, Res, Mm, Lim, Neg, R, Len, B, A]
      1 7 rroll                                        # [Mm, Dig<0, Dig, C, Leni+8, Leni, Res, Lim, Neg, R, Len, B, A]
      1 7 rroll                                        # [Res, Mm, Dig<0, Dig, C, Leni+8, Leni, Lim, Neg, R, Len, B, A]
      over over .lt                                    # [Res<Mm, Res, Mm, Dig<0, Dig, C, Leni+8, Leni, Lim, Neg, R, Len, B, A]
      swap 1 8 lroll                                   # [Res<Mm, Mm, Dig<0, Dig, C, Leni+8, Leni, Res, Lim, Neg, R, Len, B, A]
      swap 1 8 lroll                                   # [Res<Mm, Dig<0, Dig, C, Leni+8, Leni, Res, Mm, Lim, Neg, R, Len, B, A]
      | if
        # TODO: Throw error
      end

      1 5 rroll                                        # [Res, Dig, C, Leni+8, Leni, Mm, Lim, Neg, R, Len, B, A]
      1 9 rroll                                        # [R, Res, Dig, C, Leni+8, Leni, Mm, Lim, Neg, Len, B, A]
      swap over * swap                                 # [R, R*Res, Dig, C, Leni+8, Leni, Mm, Lim, Neg, Len, B, A]
      1 9 lroll                                        # [R*Res, Dig, C, Leni+8, Leni, Mm, Lim, Neg, R, Len, B, A]

      # TODO: if (result < limit + digit)

      -                                                # [R*Res-Dig, C, Leni+8, Leni, Mm, Lim, Neg, R, Len, B, A]

      # What we need: [Leni, Res, Mm, Lim, Neg, R, Len, B, C, A]
      swap 1 3 rroll                                   # [Leni+8, C, R*Res-Dig, Leni, Mm, Lim, Neg, R, Len, B, A]
      1 swap -                                         # [Leni+7, C, R*Res-Dig, Leni, Mm, Lim, Neg, R, Len, B, A]
      1 swap lroll swap                                # [Leni, R*Res-Dig, Mm, Lim, Neg, R, Len, B, C, A]
      1 swap -                                         # [Leni-1, R*Res-Dig, Mm, Lim, Neg, R, Len, B, C, A]
    end

    # [Leni, R*Res-Dig, Mm, Lim, Neg, R, Len, B, C, A]
    1 5 rroll                                          # [Neg, Leni, Res, Mm, Lim, R, Len, B, C, A]
    1 3 rroll                                          # [Res, Neg, Leni, Mm, Lim, R, Len, B, C, A]
    swap 0 .eq if
      # Negate
      .negate
    end
    # [Res, Leni, Mm, Lim, R, Len, B, C, A]
    1 5 lroll pop pop pop pop                          # [Res, Len, B, C, A]
    over 2 + 1 swap lroll                              # [Len, B, C, A, Res]

    # [Len, B, C, A, Res]

    while
      dup 1 + 1 swap rroll                             # [A, Len, B, C, Res]
      pop 1 swap -                                     # [Len, B, C, Res]
    end
    pop                                                # [Res]

    # If
  else
    # TODO: Throw error
  end
end

# Equivalent to Character.digit(char, radix)
# [Ch]
rt latin1_digit
  0  # [V, Ch]

  #     int v = -1;
  #     if (i >= '0' && i <= '9') { v = i - '0'; }
  #     else if (i >= 'A' && i <= 'Z') { v = i - 'A' + 10; }
  #     else if (i >= 'a' && i <= 'z') { v = i - 'a' + 10; }
  #     if (i % 20 == 0) System.out.println();
  #     System.out.printf("%2d, ", v);

  swap dup                  # [Ch, Ch, V]
  .char_zero swap .gte       # [Ch >= '0', Ch, V]
  over .char_nine swap .lte  # [Ch <= '9', Ch >= '0', Ch, V]
  & if
    # if (i >= '0' && i <= '9')
    # [Ch, V]
    dup .char_zero swap -    # [Ch-'0', Ch, V]
    1 3 rroll pop            # [Ch-'0' -> V, Ch]
    swap
  else
    dup                    # [Ch, V]
    .char_A swap .gte       # [Ch >= 'A', Ch, V]
    over .char_Z swap .lte  # [Ch <= 'Z', Ch >= 'A', Ch, V]
    & if
      # else if (i >= 'A' && i <= 'Z')
      # [Ch, V]
      dup .char_A swap - 10 +  # [Ch-'A'+10, Ch, V]
      1 3 rroll pop            # [Ch-'A'+10 -> V, Ch]
      swap
    else
      dup                    # [Ch, V]
      .char_a swap .gte       # [Ch >= 'a', Ch, V]
      over .char_z swap .lte  # [Ch <= 'z', Ch >= 'a', Ch, V]
      & if
        # else if (i >= 'a' && i <= 'z')
        # [Ch, V]
        dup .char_a swap - 10 +  # [Ch-'A'+10, Ch, V]
        1 3 rroll pop            # [Ch-'A'+10 -> V, Ch]
        swap
      end
    end
  end
  pop
end



#              #####################
#              # Internal routines #
#              #####################

rt _digit_one
  10 swap % 48 +
end
rt _digit_ten
  10 swap / 48 +
end

rt char_zero "0" pop end
rt char_nine "9" pop end
rt char_A "A" pop end
rt char_Z "Z" pop end
rt char_a "a" pop end
rt char_z "z" pop end
rt char_plus "+" pop end
rt char_minus "-" pop end

rt eq eq 1 3 lroll pop pop end
rt neq neq 1 3 lroll pop pop end
rt lt lt 1 3 lroll pop pop end
rt lte lte 1 3 lroll pop pop end
rt gte gte 1 3 lroll pop pop end